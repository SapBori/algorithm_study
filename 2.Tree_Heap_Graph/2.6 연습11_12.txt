#include <iostream>
#include <vector>
#include <algorithm>
enum class city : int
{
  MOSCOW,
  LONDON,
  SEOUL,
  SEATTLE,
  DUBAI,
  SYDNEY
};

std::ostream& operator<<(std::ostream& os, const city c){
  switch(c){
    case city::LONDON:
      os << "LONDON";
      return os;
    case city::SEOUL:
      os << "SEOUL";
      return os;
    case city::MOSCOW:
      os << "MOSCOW";
      return os;
    case city::SEATTLE:
      os << "SEATTLE";
      return os;
    case city::DUBAI:
      os << "DUBAI";
      return os;
    case city::SYDNEY:
      os << "SYDNEY";
      return os;
    default:
      return os;
  }
}

struct arraygraph{
  int NOPATH = -1;
  std::vector<std::vector<int>> data; // 2차원 데이터 설정
  arraygraph(int n){
    data.reserve(n);
    std::vector<int> row(n);
    std::fill(row.begin(), row.end(), NOPATH);  // 2차원 데이터 초기화
    
    for (int i = 0; i<n; i++){
      data.push_back(row);
    }
  }
  void addEdge(const city c1, const city c2, int dis){
    std::cout << "Added Edge: " << c1 << "-" << c2 << " = " << dis << std::endl;
    auto n1 = static_cast<int>(c1);
    auto n2 = static_cast<int>(c2);
    data[n1][n2] = dis;
    data[n2][n1] = dis;
  }
  void removeEdge(const city c1, const city c2){
    std::cout << "Removed Edge: " << c1 << "-" << c2 << std::endl;
    auto n1 = static_cast<int>(c1);
    auto n2 = static_cast<int>(c2);
    data[n1][n2] = NOPATH;
    data[n2][n1] = NOPATH;
  }
};
struct listgraph{
  
  std::vector<std::vector<std::pair<int,int>>> data; // 2차원 데이터 설정
  
  listgraph(int n){
    data = std::vector<std::vector<std::pair<int,int>>>(n, std::vector<std::pair<int,int>>());
    // 처음행은 -1이 아닌 NULL값으로 초기화
  }
  void addEdge(const city c1, const city c2, int dis){
    std::cout << "Added Edge: " << c1 << "-" << c2 << " = " << dis << std::endl;
    auto n1 = static_cast<int>(c1);
    auto n2 = static_cast<int>(c2);
    data[n1].push_back({n2,dis});
    data[n2].push_back({n1,dis});
  }
  void removeEdge(const city c1, const city c2){
    std::cout << "Removed Edge: " << c1 << "-" << c2 << std::endl;
    auto n1 = static_cast<int>(c1);
    auto n2 = static_cast<int>(c2);
    std::remove_if(data[n1].begin(), data[n1].end(), [n2](const auto& pair){
      return pair.first == n2;
    });
    std::remove_if(data[n2].begin(), data[n2].end(), [n1](const auto& pair){
      return pair.first == n1;
    });
  }
};
int main() 
{
    arraygraph g(6);
    g.addEdge(city::LONDON, city::MOSCOW, 2500);
    g.addEdge(city::LONDON, city::SEOUL, 9000);
    g.addEdge(city::LONDON, city::DUBAI, 5500);
    g.addEdge(city::SEOUL, city::MOSCOW, 6600);
    g.addEdge(city::SEOUL, city::SEATTLE, 8000);
    g.addEdge(city::SEOUL, city::DUBAI, 7000);
    g.addEdge(city::SEOUL, city::SYDNEY, 8000);
    g.addEdge(city::SEATTLE, city::MOSCOW, 8400);
    g.addEdge(city::SEATTLE, city::SYDNEY, 12500);
    g.addEdge(city::SYDNEY, city::DUBAI, 1200);
    
    g.addEdge(city::SEATTLE, city::LONDON, 8000);
    g.removeEdge(city::SEATTLE, city::LONDON);
    
    listgraph lg(6);
    lg.addEdge(city::LONDON, city::MOSCOW, 2500);
    lg.addEdge(city::LONDON, city::SEOUL, 9000);
    lg.addEdge(city::LONDON, city::DUBAI, 5500);
    lg.addEdge(city::SEOUL, city::MOSCOW, 6600);
    lg.addEdge(city::SEOUL, city::SEATTLE, 8000);
    lg.addEdge(city::SEOUL, city::DUBAI, 7000);
    lg.addEdge(city::SEOUL, city::SYDNEY, 8000);
    lg.addEdge(city::SEATTLE, city::MOSCOW, 8400);
    lg.addEdge(city::SEATTLE, city::SYDNEY, 12500);
    lg.addEdge(city::SYDNEY, city::DUBAI, 1200);
    
    lg.addEdge(city::SEATTLE, city::LONDON, 8000);
    lg.removeEdge(city::SEATTLE, city::LONDON);
    return 0;
}
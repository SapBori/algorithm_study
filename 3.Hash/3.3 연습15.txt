#include <iostream>
#include <vector>

using namespace std;
class hash_map{
  vector<int> data1;
  vector<int> data2;
  int size;
  
  int hash1(int key) const{
    // 1차 해시함수
    return key % size;
  }
  int hash2(int key) const{
    // 2차 해시함수
    return (key/size) % size;
  }
public:
  hash_map(int n) : size(n){
    data1 = vector<int>(size,-1);
    data2 = vector<int>(size,-1);
  }
  std::vector<int>::iterator lookup(int key){
    auto hash_value1 = hash1(key);
    if(data1[hash_value1]== key){
      cout << "1번 테이블에서 " << key << "를 찾았습니다." << endl;
      return data1.begin()+ hash_value1;
    }
    auto hash_value2 = hash2(key);
    if(data2[hash_value2]== key){
      cout << "2번 테이블에서 " << key << "를 찾았습니다." << endl;
      return data2.begin()+ hash_value2;
    }
    // 못 찾은 경우 
    return data2.end();
    }
  void erase(int key){
    auto position = lookup(key);
    if(position != data2.end()){
      *position = -1;
      cout << key << "에 해당하는 원소를 삭제하였습니다." << endl;
    }
    else {
      cout << key << "에 해당하는 원소를 찾을 수 없습니다." << endl;
    }
  }
  void insert(int key){
    // 삽입 함수는 재귀적으로 동작
    insert_impl(key,0,1);
  }
  void print(void){
    cout << "Index : ";
    for (int i = 0; i<size; i++){
      cout << i << '\t';
    }
    cout << endl;
    
    cout << "Data1 : ";
    for(auto i : data1){
      cout << i << '\t';
    }
    cout << endl;
    cout << "Data2 : ";
    for(auto i : data2){
      cout << i << '\t';
    }
    cout << endl;
  }
private:
  void insert_impl(int key, int cnt, int table){
    if(cnt >= size){
      cout << key << " 삽입 시 순환 발생, 재해싱 필요" << endl;
      return;
    }
    if(table == 1){
      int hash = hash1(key);
      if(data1[hash]== -1){
        cout << table << "번 테이블에 " << key << "삽입 완료" << endl;
        data1[hash] = key;
      }
      else {
        int old = data1[hash];
        data1[hash] = key;
        cout << table << "번 테이블에 " << key << "삽입, 기존의 " << old << "이동 -> ";
        insert_impl(old, cnt+1, 2);
      }
    }
    else {
      int hash = hash2(key);
      if(data2[hash]== -1){
        cout << table << "번 테이블에 " << key << "삽입 완료" << endl;
        data2[hash] = key;
      }
      else {
        int old = data2[hash];
        data2[hash] = key;
        cout << table << "번 테이블에 " << key << "삽입, 기존의 " << old << "이동 -> ";
        insert_impl(old, cnt+1, 1);
      }
    }
  }
};
int main() 
{
  hash_map map(7);
  map.print();
  cout << endl;
  
  map.insert(10);
  map.insert(20);
  map.insert(30);
  cout << endl;
  
  
  map.insert(104);
  map.insert(2);
  map.insert(70); 
  map.insert(9);
  map.insert(2); 
  map.insert(7);
  
  cout << endl;
  
  map.print();
  map.insert(14);
  return 0;
}